#!/Library/Frameworks/Python.framework/Versions/2.7/bin/python

import argparse
import subprocess
from splunk_deployment import SplunkDeployment
from retriever import Retriever
from common import *

def list_handler(args):
    if args['installed_app']:
        splunk_deployments.list_installed_app()
    elif args['web_port']:
        splunk_deployments.list_web_port()
    elif args['running_splunk']:
        splunk_deployments.list_running_splunk()
    else:
        parser.error('arg "list %s" not supported' % func)

def stop_handler(args):
    func = ' '.join(args)
    if func == 'all splunk':
        splunk_deployments.stop_all_splunk()
    else:
        parser.error('arg "stop %s" not supported' % func)

def update_handler(args):
    splunk_name = args[0]
    splunk_path = config['splunk_path']
    splunk_dir = join(splunk_path, splunk_name)
    if not is_splunk_dir(splunk_dir):
        print splunk_name + ' does not exist'
        exit()

    retriever = Retriever(category=args[1], name=args[2])
    print 'latest: ' + retriever.get_latest_pkg_name() + ' ' + retriever.get_latest_pkg_date()
    pkg_path = retriever.download_latest_pkg()
    print 'installing'
    p = subprocess.Popen([join(splunk_dir,'bin/splunk'), 'install', 'app', pkg_path, '-update', '1'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.wait()
    out, err = p.communicate()
    if err != "":
        print err
        return

    if len(args) >= 4 and args[3] == 'restart': # restart splunk
        subprocess.call([join(splunk_dir, 'bin/splunk'), 'restart'])


def latest_handler(args):
    if args['app']:
        category = 'APP'
        name = 'app-' + args['app']
    elif args['ta']:
        category = 'TA'
        name = 'ta-' + args['ta']
    else:
        print 'Error: either -app or -ta must be specified'
        exit()

    retriever = Retriever(category=category, name=name)
    print retriever.get_latest_pkg_name() + ' ' + retriever.get_latest_pkg_date()
    if len(args) == 3 and args[2] == 'download':
        pkg_path = retriever.download_latest_pkg()
        print 'package has been downloaded to ' + pkg_path


if __name__ == '__main__':
    splunk_deployments = SplunkDeployment()

    parser = argparse.ArgumentParser()
        
    command = None
    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # create parser for the "latest" command
    parser_latest = subparsers.add_parser('latest', help='Get latest')
    latest_group = parser_latest.add_mutually_exclusive_group()
    latest_group.add_argument('-app', help='retrieve latest app "APP"')
    latest_group.add_argument('-ta', help='retrieve latest ta "TA"')
    parser_latest.add_argument('-download', action='store_true', help='if set, download the latest app or ta')

    # create parser for the "list" command
    parser_list = subparsers.add_parser('list', help='List info of all splunk instances')
    list_group = parser_list.add_mutually_exclusive_group()
    list_group.add_argument('-wp', '--web-port', action='store_true', help='list web port of all splunk instances')
    list_group.add_argument('-rs', '--running-splunk', action='store_true', help='list all running splunk instances')
    list_group.add_argument('-ia', '--installed-app', action='store_true', help='list installed apps of all splunk instances')

    args = vars(parser.parse_args())
    if args['command'] == 'latest':
        latest_handler(args)
    elif args['command'] == 'list':
        list_handler(args)

