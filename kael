#!/Library/Frameworks/Python.framework/Versions/2.7/bin/python

__author__ = 'Jarvis'

import logging
logging.basicConfig(level=logging.WARNING, filename='kael.log', format='%(asctime)s %(filename)s %(levelname)s %(message)s')

import argparse
import subprocess


#logging.basicConfig(filename='kael.log', level=logging.INFO)

def list_handler(args):
    if args['installed_app']:
        splunk_deployment.list_installed_app()
    elif args['web_port']:
        splunk_deployment.list_web_port()
    elif args['running_splunk']:
        splunk_deployment.list_running_splunk()
    else:
        logger.warning('arg "list %s" not supported' % func)

def stop_handler(args):
    if args['all']:
        splunk_deployment.stop_all_splunk()
    else:
        parser.error('arg "stop %s" not supported' % func)

def update_handler(args):
    splunk_name = args['splunk']
    splunk = splunk_deployment.get_splunk(splunk_name)

    category, name = _category_name_match(args)
    retriever = Retriever(category=category, name=name)
    print 'latest: ' + retriever.get_latest_pkg_name() + ' ' + retriever.get_latest_pkg_date()
    
    pkg_path = retriever.download_latest_pkg()
    print 'installing'
    out, err = splunk.run_command(['install', 'app', pkg_path, '-update', '1'])
    if err != "":
        print err
        logger.error('error in updating {category} {name}.\n Error msg: {err}'.format(category=category, name=name, err=err))
        return

    if args['restart']: # restart splunk
        print 'restarting'
        splunk.run_command(['restart'])


def latest_handler(args):
    category, name = _category_name_match(args)

    retriever = Retriever(category=category, name=name)
    print retriever.get_latest_pkg_name() + ' ' + retriever.get_latest_pkg_date()
    if args['download']:
        pkg_path = retriever.download_latest_pkg()
        print 'package has been downloaded to ' + pkg_path


def _category_name_match(args):
    if args['app']:
        category = 'APP'
        name = 'app-' + args['app']
    elif args['ta']:
        category = 'TA'
        name = 'ta-' + args['ta']
    elif args['sa']:
        category = 'SA'
        name = 'sa-' + args['sa']
    else:
        print 'Error: must specify one of app, ta or sa'
        exit()

    return (category, name)


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    
    # loglevel setting
    parser.add_argument('--log', nargs='?', choices=['debug', 'info', 'warning', 'error', 'critical'], const='warning', default='warning', help='log level')

    command = None
    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # create parser for the "latest" command
    parser_latest = subparsers.add_parser('latest', help='Get latest')
    latest_group = parser_latest.add_mutually_exclusive_group()
    latest_group.add_argument('-app', help='retrieve latest app "APP"')
    latest_group.add_argument('-ta', help='retrieve latest ta "TA"')
    latest_group.add_argument('-sa', help='retrieve latest sa "SA"')
    parser_latest.add_argument('-d', '--download', action='store_true', help='if set, download the latest app or ta')

    # create parser for the "list" command
    parser_list = subparsers.add_parser('list', help='List info of all splunk instances')
    list_group = parser_list.add_mutually_exclusive_group()
    list_group.add_argument('-wp', '--web-port', action='store_true', help='list web port of all splunk instances')
    list_group.add_argument('-rs', '--running-splunk', action='store_true', help='list all running splunk instances')
    list_group.add_argument('-ia', '--installed-app', action='store_true', help='list installed apps of all splunk instances')

    # create parser for the "stop" command
    parser_stop = subparsers.add_parser('stop', help='Stop splunk instances')
    parser_stop.add_argument('-a', '--all', action='store_true', help='stop all splunk instances')

    # create parser for the "update" command
    parser_update = subparsers.add_parser('update', help='Update app or ta')
    parser_update.add_argument('splunk', help='the splunk instance')
    update_group = parser_update.add_mutually_exclusive_group()
    update_group.add_argument('-app', help='specify the app "APP" to update')
    update_group.add_argument('-ta', help='specify the ta "TA" to update')
    update_group.add_argument('-sa', help='specify the sa "SA" to update')
    parser_update.add_argument('-r', '--restart', action='store_true', help='restart the splunk instance')

    # create parser for the "tsearch" command
    parser_tsearch = subparsers.add_parser('tsearch', help='Trigger saved search')
    parser_tsearch.add_argument('splunk', help='the splunk instance')
    parser_tsearch.add_argument('namespace', help='the app namespace where the saved searches belong to')


    args = vars(parser.parse_args())
    numeric_level=getattr(logging, args['log'].upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args['log'])

    logging.getLogger().setLevel(numeric_level)
    logger = logging.getLogger(__name__)
    logger.debug('command line args: ' + str(args))

    from splunk_deployment import SplunkDeployment
    from retriever import Retriever
    from common import *

    splunk_deployment = SplunkDeployment()
    config = Config().get_config()

    if args['command'] == 'latest':
        latest_handler(args)
    elif args['command'] == 'list':
        list_handler(args)
    elif args['command'] == 'stop':
        stop_handler(args)
    elif args['command'] == 'update':
        update_handler(args)
    elif args['command'] == 'tsearch':
        tsearch_handler(args)
    else:
        print args['command'] + 'is not supported'


